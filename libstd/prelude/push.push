// Copyright 2020 Erik GÃ¶tzfried
// Licensed under the Apache License, Version 2.0( the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* This file is an example implementation of the prelude.
 */

/* Rules
 * MCI functions are only valid in prelude files or in prelude-included std-lib files,
 * MCI functions (names):
 * - define_mci_rule: very basic rules, which define the language syntax.
 * - create_mci_instruction: used in methods to define e. g. very low-level operations like integer addition.
 * - define_mci_optimization: take in a push-lambda which contain optimizations on the AST and an optimization execution level to be used conditionally
 * define_mci_rule syntax:
 *     Is independent from the loaded prelude
 *     MCI functions always start with the name, then the parameters in parenthesis and end with a semicolon.
 *     The parameters of MCI rules always depend on their MCI, which is the first parameter.
 *     The parameters are separated by commas, sub parameters by spaces.
 *     MCI parameters may not be empty.
 *     Strings and characters are always escaped and written in double quotes.
 *     If a string is expected for e. g. a keyword, you can either write it in double quotes or use a predefined name in most cases.
 *     The "->" syntax is often used to define which token/AST has which meaning in the syntax rule. The names are defines by the MCI instruction and the specified layout type.
 *     Syntax syntax: [AMBIGUOUS,] precedence [CLASS x FROM y BIAS z], alignment(ltr or rtl), syntax type (double_list, etc.), syntax parameters (normally multiple, using the "token -> name" syntax)
 *     Operator syntax: global symbol (full symbol name; parameters are applied based on layout type), syntax
 * Multiple definitions of one MCI are allowed.
 * Include other prelude files with "#prelude(<file>)" and std-library files with "#include(<file>)". This is only possible in a prelude file.
 * Only a std-library file included this way is able to use the global "create_mci_instruction()" function.
 * 
 */

// Most basic rules
define_mci_rule( EXPRESSION_RULES, divide semicolon, block left_brace right_brace, term left_parenthesis right_parenthesis, array left_bracket right_bracket ); // list of rules for expressions: semicolons divide expressions/statements, braces combine a block, parenthesis combine a term
define_mci_rule( IDENTIFIER_RULES, no_spaces, unused begin "_" ); // define rules for identifiers
define_mci_rule( IDENTIFIER_CASE, functions snake, method snake, variables snake, modules snake, struct pascal, trait pascal ); // define how which identifiers have to be written

// Basic literal rules
define_mci_rule( LITERAL_CHARACTER_ESCAPES, newline "\\n", horizontal_tab "\\t", vertical_tab "\\v", carriage_return "\\r", backslash "\\\\", quote "\\\'", double_quotes "\\\"", null "\\0" ); // Possible character escapes in strings or single characters

// Character ranges
define_mci_rule( NEW_RANGE, identifier, "_" ); // additional identifier characters
define_mci_rule( NEW_RANGE, opt_identifier, "0" "9" ); // additional allowed characters
define_mci_rule( NEW_RANGE, integer, "_", "0" "9" );
define_mci_rule( NEW_RANGE, whitespace, " ", "\n", "\r", "\t" );

// Comment rules
define_mci_rule( NEW_LEVEL, COMMENT, b, "/*" "*/", overlay b );
define_mci_rule( NEW_LEVEL, COMMENT_LINE, ln, "//" "\n" );
define_mci_rule( NEW_LEVEL, COMMENT_LINE, lr, "//" "\r" );
define_mci_rule( NEW_LEVEL, COMMENT, bd, "/**" "*/", overlay b );
define_mci_rule( NEW_LEVEL, COMMENT_LINE, lnd, "///" "\n" );
define_mci_rule( NEW_LEVEL, COMMENT_LINE, lrd, "///" "\r" );

// String rules
define_mci_rule( NEW_LEVEL, STRING, s, double_quotes double_quotes, overlay v ); // simple string
define_mci_rule( NEW_LEVEL, STRING, sb, "\"\"\"" "\"\"\"", overlay v ); // string block
define_mci_rule( NEW_LEVEL, STRING, sw, double_quotes double_quotes, prefix "w", overlay v ); // wide string
//define_mci_rule( NEW_LEVEL, STRING, sr, double_quotes double_quotes, prefix "r", rep_delimiter "(" ")" ); // raw string
//define_mci_rule( NEW_LEVEL, STRING, srw, double_quotes double_quotes, prefix "wr", rep_delimiter "(" ")" ); // wide raw string

// Additional normal code rules
define_mci_rule( NEW_LEVEL, NORMAL, n, overlay b ln lr bd lnd lrd c sb s sb sw sr srw ); // normal code (root)
//define_mci_rule( NEW_LEVEL, NORMAL, v, "\\(" ")" ); // value extraction in strings


// Special basic literals
//define_mci_rule( SYNTAX, OPERATOR, std::literal::bin_integer, 1, ltr, double_list, "0b", integer -> right ); // binary radix
//define_mci_rule( SYNTAX, OPERATOR, std::literal::oct_integer, 1, ltr, double_list, "0o", integer -> right ); // octal radix
//define_mci_rule( SYNTAX, OPERATOR, std::literal::hex_integer, 1, ltr, double_list, "0x", integer -> right ); // hexadecimal radix
define_mci_rule( SYNTAX, OPERATOR, std::literal::float, 2, ltr, triple_list, integer -> left, "." -> op, integer -> right ); // simple float
//define_mci_rule( SYNTAX, OPERATOR, std::literal::float_exp, 2, ltr, quintuple_list, integer -> left, "." -> op, integer -> right, "e", integer -> expo ); // float with positive exponent
//define_mci_rule( SYNTAX, OPERATOR, std::literal::float_exp, 2, ltr, quintuple_list, integer -> left, "." -> op, integer -> right, "E", integer -> expo ); // float with positive exponent
//define_mci_rule( SYNTAX, OPERATOR, std::literal::float_exp_neg, 2, ltr, sextuple_list, integer -> left, "." -> op, integer -> right, "e", "-", integer -> expo ); // float with negative exponent
//define_mci_rule( SYNTAX, OPERATOR, std::literal::float_exp_neg, 2, ltr, sextuple_list, integer -> left, "." -> op, integer -> right, "E", "-", integer -> expo ); // float with negative exponent

// Scope access
define_mci_rule( SYNTAX, SCOPE_ACCESS, 4, ltr, triple_list, symbol -> base, "::" -> op, symbol -> member ); // scope access is a symbol extension
define_mci_rule( SYNTAX, SCOPE_ACCESS, 5, ltr, double_list, "::" -> op, symbol -> member ); // global scope access

// Module specifier
define_mci_rule( SYNTAX, MODULE_SPECIFIER, 6, rtl, triple_list, "mod", symbol -> symbol, completed -> child ); // module specification ("mod" keyword)

// Member and array access
define_mci_rule( SYNTAX, MEMBER_ACCESS, 7, ltr, triple_list, expr -> base, "." -> op, expr -> member ); // member access of an object
define_mci_rule( SYNTAX, ARRAY_ACCESS, 7, ltr, double_list, expr -> base, array_spec -> index ); // array access with a type or variable.

// Functions
define_mci_rule( SYNTAX, FUNCTION_HEAD, 7, ltr, double_list, expr -> symbol, unit -> parameters ); // function head without parameters
define_mci_rule( SYNTAX, FUNCTION_HEAD, 7, ltr, double_list, expr -> symbol, term -> parameters ); // function head with a single parameter
define_mci_rule( SYNTAX, FUNCTION_HEAD, 7, ltr, double_list, expr -> symbol, tuple -> parameters ); // function head with multiple parameters
define_mci_rule( SYNTAX, FUNCTION_HEAD, 7, rtl, double_list, array_spec -> symbol, unit -> parameters ); // lambda syntax without parameters
define_mci_rule( SYNTAX, FUNCTION_HEAD, 7, rtl, double_list, array_spec -> symbol, term -> parameters ); // lambda syntax with a single parameter
define_mci_rule( SYNTAX, FUNCTION_HEAD, 7, rtl, double_list, array_spec -> symbol, tuple -> parameters ); // lambda syntax with multiple parameters

define_mci_rule( SYNTAX, FUNCTION_DEFINITION, std::op::Function, 8, rtl, double_list, array_spec -> symbol, completed -> child ); // lambda without an explicit return type nor parameters
define_mci_rule( SYNTAX, FUNCTION_DEFINITION, std::op::Function, 8, rtl, quadruple_list, array_spec -> symbol, "->", expr -> return_type, completed -> child ); // lambda with an explicit return type, but no parameters
define_mci_rule( SYNTAX, FUNCTION_DEFINITION, std::op::Function, 8 BIAS 11, rtl, double_list, symbol -> symbol, completed -> child ); // function without an explicit return type nor parameters
define_mci_rule( SYNTAX, FUNCTION_DEFINITION, std::op::Function, 8, rtl, quadruple_list, symbol -> symbol, "->", expr -> return_type, completed -> child ); // function with an explicit return type, but no parameters
define_mci_rule( SYNTAX, FUNCTION_DEFINITION, std::op::Function, 8, rtl, double_list, fn_head -> head, completed -> child ); // function without an explicit return type
define_mci_rule( SYNTAX, FUNCTION_DEFINITION, std::op::Function, 8, rtl, quadruple_list, fn_head -> head, "->", expr -> return_type, completed -> child ); // function with an explicit return type

// Special specifiers
define_mci_rule( SYNTAX, MACRO, 8, rtl, triple_list, symbol -> symbol, "!", expr -> child ); // macro
define_mci_rule( SYNTAX, ANNOTATION, 8, rtl, double_list, "#", fn_head -> head ); // compiler annotation
define_mci_rule( SYNTAX, UNSAFE_BLOCK, 9, rtl, double_list, "unsafe", completed -> child ); // unsafe block
define_mci_rule( SYNTAX, STATIC_STATEMENT, 10, rtl, double_list, "$", completed -> child ); // static statement

// Operators
define_mci_rule( SYNTAX, OPERATOR, std::op::log_not, 11, rtl, double_list, "!" -> op, expr -> right ); // define the logical not operator
define_mci_rule( SYNTAX, OPERATOR, std::op::invert, 11, rtl, double_list, "~" -> op, expr -> right ); // define the not/invert operator
define_mci_rule( SYNTAX, OPERATOR, std::op::negate, 11 BIAS 11, rtl, double_list, "-" -> op, expr -> right ); // define the negation operator
define_mci_rule( SYNTAX, OPERATOR, std::op::positive, 11 BIAS 11, rtl, double_list, "+" -> op, expr -> right ); // define the positive operator (only for symmetry with the negation operator)
define_mci_rule( SYNTAX, OPERATOR, std::op::increment_prefix, 11, rtl, double_list, "++" -> op, expr -> right ); // define the prefix increment operator
define_mci_rule( SYNTAX, OPERATOR, std::op::decrement_prefix, 11, rtl, double_list, "--" -> op, expr -> right ); // define the prefix decrement operator
define_mci_rule( SYNTAX, REFERENCE_ATTR, 11, rtl, double_list, "&" -> op, symbol -> symbol ); // syntax to define a reference
define_mci_rule( SYNTAX, MUTABLE_ATTR, 11, rtl, double_list, "mut", symbol_like -> symbol_like ); // syntax to define a mutable symbol
define_mci_rule( SYNTAX, OPERATOR, std::op::increment_postfix, 12, ltr, double_list, expr -> left, "++" -> op ); // define the postfix increment operator
define_mci_rule( SYNTAX, OPERATOR, std::op::decrement_postfix, 12, ltr, double_list, expr -> left, "--" -> op ); // define the postfix decrement operator
define_mci_rule( SYNTAX, TYPED, 13, ltr, triple_list, expr -> left, ":" -> op, expr -> right ); // type defining operator
define_mci_rule( SYNTAX, TYPE_OF, 14, rtl, double_list, "type_of" -> op, expr -> child ); // type_of operator
define_mci_rule( SYNTAX, OPERATOR, std::op::cast_from, 14, ltr, triple_list, expr -> left, "as" -> op, expr -> right ); // define the From cast with the as keyword
define_mci_rule( SYNTAX, OPERATOR, std::op::cast_into, 14, ltr, triple_list, expr -> left, "as" -> op, expr -> right ); // define the Into cast with the as keyword

define_mci_rule( SYNTAX, OPERATOR, std::op::multiplication, 15, ltr, triple_list, expr -> left, "*" -> op, expr -> right ); // basic multiplication operator
define_mci_rule( SYNTAX, OPERATOR, std::op::division, 15, ltr, triple_list, expr -> left, "/" -> op, expr -> right ); // basic division operator
define_mci_rule( SYNTAX, OPERATOR, std::op::remain, 15, ltr, triple_list, expr -> left, "%" -> op, expr -> right ); // basic remaining operator
define_mci_rule( SYNTAX, OPERATOR, std::op::addition, 16 BIAS 9, ltr, triple_list, expr -> left, "+" -> op, expr -> right ); // basic addition operator
define_mci_rule( SYNTAX, OPERATOR, std::op::subtraction, 16 BIAS 9, ltr, triple_list, expr -> left, "-" -> op, expr -> right ); // basic subtraction operator

define_mci_rule( SYNTAX, OPERATOR, std::op::bit_and, 17, ltr, triple_list, expr -> left, "&" -> op, expr -> right ); // basic bit "and" operator
define_mci_rule( SYNTAX, OPERATOR, std::op::bit_xor, 18, ltr, triple_list, expr -> left, "\'" -> op, expr -> right ); // basic bit xor operator
define_mci_rule( SYNTAX, OPERATOR, std::op::bit_or, 19, ltr, triple_list, expr -> left, "|" -> op, expr -> right ); // basic bit or operator
define_mci_rule( SYNTAX, OPERATOR, std::op::bit_shift_left, 20, ltr, triple_list, expr -> left, "<<" -> op, expr -> right ); // basic left bit shift operator
define_mci_rule( SYNTAX, OPERATOR, std::op::bit_shift_right, 20, ltr, quadruple_list, expr -> left, ">" -> op1, ">" -> op2, expr -> right ); // basic right bit shift operator

define_mci_rule( SYNTAX, RANGE, EXCLUDING, 21 BIAS 9, rtl, triple_list, expr -> from, ".." -> op, expr -> to ); // range operator for 0..5
define_mci_rule( SYNTAX, RANGE, FROM_EXCLUDING, 21, rtl, double_list, expr -> from, ".." -> op ); // range operator 5..
define_mci_rule( SYNTAX, RANGE, TO_EXCLUDING, 21 BIAS 11, rtl, double_list, ".." -> op, expr -> to ); // range operator for ..5
define_mci_rule( SYNTAX, RANGE, INCLUDING, 21 BIAS 9, rtl, triple_list, expr -> from, "..=" -> op, expr -> to ); // range operator for 0..=5
define_mci_rule( SYNTAX, RANGE, TO_INCLUDING, 21 BIAS 11, rtl, double_list, "..=" -> op, expr -> to ); // range operator for ..=5

define_mci_rule( SYNTAX, OPERATOR, std::op::iterate_collection, 22, ltr, triple_list, expr -> left, "in" -> op, expr -> right ); // iteration over a collection

define_mci_rule( SYNTAX, OPERATOR, std::op::smaller, AMBIGUOUS, 23 CLASS 4, ltr, triple_list, expr -> left, "<" -> op, expr -> right ); // regular compare
define_mci_rule( SYNTAX, OPERATOR, std::op::smaller_or_eql, 23, ltr, triple_list, expr -> left, "<=" -> op, expr -> right ); // regular compare (with or equal)
define_mci_rule( SYNTAX, OPERATOR, std::op::bigger, 23, ltr, triple_list, expr -> left, ">" -> op, expr -> right ); // inverse compare
define_mci_rule( SYNTAX, OPERATOR, std::op::bigger_or_eql, 23, ltr, triple_list, expr -> left, ">=" -> op, expr -> right ); // inverse compare (with or equal)
define_mci_rule( SYNTAX, OPERATOR, std::op::is_equal, 24, ltr, triple_list, expr -> left, "==" -> op, expr -> right ); // equality comparison
define_mci_rule( SYNTAX, OPERATOR, std::op::is_not_equal, 24, ltr, triple_list, expr -> left, "!=" -> op, expr -> right ); // inequality comparison

define_mci_rule( SYNTAX, OPERATOR, std::op::logic_and, 25, ltr, triple_list, expr -> left, "&&" -> op, expr -> right ); // basic logical "and" operator
define_mci_rule( SYNTAX, OPERATOR, std::op::logic_or, 26, ltr, triple_list, expr -> left, "||" -> op, expr -> right ); // basic logical "or" operator

define_mci_rule( SYNTAX, OPERATOR, std::op::assignment, 27, rtl, triple_list, expr -> left, "=" -> op, expr -> right ); // simple assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::add_assign, 27, rtl, triple_list, expr -> left, "+=" -> op, expr -> right ); // simple add assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::subtract_assign, 27, rtl, triple_list, expr -> left, "-=" -> op, expr -> right ); // simple subtract assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::multiply_assign, 27, rtl, triple_list, expr -> left, "*=" -> op, expr -> right ); // simple multiply assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::divide_assign, 27, rtl, triple_list, expr -> left, "/=" -> op, expr -> right ); // simple divide assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::remain_assign, 27, rtl, triple_list, expr -> left, "%=" -> op, expr -> right ); // simple remain assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::and_assign, 27, rtl, triple_list, expr -> left, "&=" -> op, expr -> right ); // simple bit and assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::xor_assign, 27, rtl, triple_list, expr -> left, "\'=" -> op, expr -> right ); // simple bit xor assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::or_assign, 27, rtl, triple_list, expr -> left, "|=" -> op, expr -> right ); // simple bit or assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::shift_left_assign, 27, rtl, triple_list, expr -> left, "<<=" -> op, expr -> right ); // simple left bit shift assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::shift_right_assign, 27, rtl, triple_list, expr -> left, ">>=" -> op, expr -> right ); // simple right bit shift assignment
define_mci_rule( SYNTAX, OPERATOR, std::op::default_assign, 27, rtl, triple_list, expr -> left, ":=" -> op, expr -> right ); // simple default operator assignment

define_mci_rule( SYNTAX, OPERATOR, std::op::implication, 28, rtl, triple_list, expr -> left, "=>" -> op, expr -> right ); // pair two variables in an implication

// Special prefixes
define_mci_rule( SYNTAX, DECLARATION_ATTR, 29, rtl, double_list, "decl", fn_head -> head ); // declaration of a symbol
define_mci_rule( SYNTAX, PUBLIC_ATTR, 29, rtl, double_list, "pub", expr -> child ); // specification of a public symbol or function

// Comma linking operator
define_mci_rule( SYNTAX, COMMA_OPERATOR, 30, rtl, triple_list, expr -> left, "," -> op, expr -> right ); // the comma-linking operator
define_mci_rule( SYNTAX, COMMA_OPERATOR, 30, rtl, double_list, expr -> left, "," -> op ); // the comma-linking operator with no following expression

// OOP constructs
define_mci_rule( SYNTAX, STRUCTURE, 31 BIAS 9, rtl, triple_list, "struct", symbol -> symbol, completed -> child ); // struct declarations are defined by the keyword "struct", a identifier and the following body.
define_mci_rule( SYNTAX, STRUCTURE, 31, rtl, single_list, "struct" ); // anonymous struct
define_mci_rule( SYNTAX, TRAIT, 31 BIAS 9, rtl, triple_list, "trait", symbol -> symbol, completed -> child ); // trait declarations start with the "trait" keyword, then the new traits' name and the body with its method.
define_mci_rule( SYNTAX, IMPLEMENTATION, 31 BIAS 9, rtl, triple_list, "impl", symbol -> struct_symbol, completed -> child ); // impl-blocks which defines methods for a struct independent of a trait
define_mci_rule( SYNTAX, IMPLEMENTATION, 31 BIAS 9, rtl, quintuple_list, "impl", symbol -> trait_symbol, "for", symbol -> struct_symbol, completed -> child ); // impl-blocks which defines a trait for a struct

// Special assignments
define_mci_rule( SYNTAX, ALIAS_BINDING, 32, rtl, double_list, "use", expr -> child ); // use-statement begins with the keyword "use" and ends with an assignment of the new identifier.
define_mci_rule( SYNTAX, SIMPLE_BINDING, 32, rtl, double_list, "let", expr -> child ); // let keyword which starts a new variable binding

// Control flow
define_mci_rule( SYNTAX, IF_EXPRESSION, 33 BIAS 9, rtl, triple_list, "if", expr -> condition, completed -> true_expr ); // if expressions/statements are defined with the keyword "if" a condition expression and a executable block
define_mci_rule( SYNTAX, IF_ELSE_EXPRESSION, 33 BIAS 9, rtl, quintuple_list, "if", expr -> condition, completed -> true_expr, "else", completed -> false_expr ); // if-else expressions/statements are defined with the keyword "if" a condition expression, a executable block, the "else" keyword and an alternative executable block
define_mci_rule( SYNTAX, PRE_CONDITION_LOOP_CONTINUE, 33 BIAS 9, rtl, triple_list, "while", expr -> condition, completed -> child ); // regular while loop
define_mci_rule( SYNTAX, PRE_CONDITION_LOOP_ABORT, 33 BIAS 9, rtl, triple_list, "until", expr -> condition, completed -> child ); // regular while loop with negated condition
define_mci_rule( SYNTAX, POST_CONDITION_LOOP_CONTINUE, 33 BIAS 9, rtl, quadruple_list, "do", completed -> child, "while", expr -> condition ); // regular do-while loop
define_mci_rule( SYNTAX, POST_CONDITION_LOOP_ABORT, 33 BIAS 9, rtl, quadruple_list, "do", completed -> child, "until", expr -> condition ); // regular do-while loop with negated condition
define_mci_rule( SYNTAX, INFINITE_LOOP, 33 BIAS 9, rtl, double_list, "loop", completed -> child ); // infinite loop
define_mci_rule( SYNTAX, ITERATOR_LOOP, 33 BIAS 9, rtl, triple_list, "for", expr -> iterator, completed -> child ); // for loop over an iterator
define_mci_rule( SYNTAX, MATCH_EXPRESSION, 33 BIAS 9, rtl, triple_list, "match", expr -> selector, completed -> child ); // match keyword which matches an expression

// Templates
define_mci_rule( SYNTAX, TEMPLATE_POSTFIX, 34 CLASS 3 FROM 4, ltr, quadruple_list, expr -> symbol, "<", expr -> child, ">" ); // single template arguments are surrounded by angular brackets


// Primitive types
define_mci_rule( BASE_TRAIT, INTEGER, std::num::Integer ); // Defines which trait describes the integer type
define_mci_rule( BASE_TRAIT, STRING, std::str::String ); // Defines which trait describes the string type
define_mci_rule( BASE_TRAIT, IMPLICATION, std::base::Implication ); // Defines which trait describes the implication type
define_mci_rule( BASE_TRAIT, NEVER, std::base::Never ); // Defines which trait describes the never type

define_mci_rule( SPECIAL_TYPE, TYPE, "type" ); // "type" type
define_mci_rule( SPECIAL_TYPE, UNIT, "()" ); // unit-type
define_mci_rule( SPECIAL_TYPE, UNKNOWN, "_" ); // unknown type
define_mci_rule( SPECIAL_TYPE, IDENTIFIER, "ident" ); // "identifier" type
define_mci_rule( SPECIAL_TYPE, SELF_TYPE, "Self" ); // "Self" type
define_mci_rule( SPECIAL_TYPE, SELF, "self" ); // "self" symbol

define_mci_rule( TYPE_MEMORY_BLOB, "bool", 1 );
define_mci_rule( TYPE_MEMORY_BLOB, "char", 1 );
define_mci_rule( TYPE_MEMORY_BLOB, "char8", 1 );
define_mci_rule( TYPE_MEMORY_BLOB, "usize", 4 );
define_mci_rule( TYPE_MEMORY_BLOB, "isize", 4 );

define_mci_rule( TYPE_MEMORY_BLOB, "i8", 1 );
define_mci_rule( TYPE_MEMORY_BLOB, "i16", 2 );
define_mci_rule( TYPE_MEMORY_BLOB, "i32", 4 );
define_mci_rule( TYPE_MEMORY_BLOB, "i64", 8 );
define_mci_rule( TYPE_MEMORY_BLOB, "i128", 16 );
define_mci_rule( TYPE_MEMORY_BLOB, "i256", 32 );
define_mci_rule( TYPE_MEMORY_BLOB, "u8", 1 );
define_mci_rule( TYPE_MEMORY_BLOB, "u16", 2 );
define_mci_rule( TYPE_MEMORY_BLOB, "u32", 4 );
define_mci_rule( TYPE_MEMORY_BLOB, "u64", 8 );
define_mci_rule( TYPE_MEMORY_BLOB, "u128", 16 );
define_mci_rule( TYPE_MEMORY_BLOB, "u256", 32 );
define_mci_rule( TYPE_MEMORY_BLOB, "f32", 4 );
define_mci_rule( TYPE_MEMORY_BLOB, "f64", 8 );
define_mci_rule( TYPE_MEMORY_BLOB, "f128", 16 );
define_mci_rule( TYPE_MEMORY_BLOB, "f256", 32 );

// Special literals
define_mci_rule( NEW_LITERAL, "true", "bool", 1 );
define_mci_rule( NEW_LITERAL, "false", "bool", 0 );
